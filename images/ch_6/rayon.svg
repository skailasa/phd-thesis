<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="165.82841mm"
   height="141.82623mm"
   viewBox="0 0 165.82841 141.82623"
   version="1.1"
   id="svg5"
   inkscape:version="1.1.1 (c3084ef, 2021-09-22)"
   sodipodi:docname="rayon.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview7"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:document-units="mm"
     showgrid="false"
     inkscape:zoom="1.0020009"
     inkscape:cx="288.42291"
     inkscape:cy="280.93789"
     inkscape:window-width="1712"
     inkscape:window-height="913"
     inkscape:window-x="0"
     inkscape:window-y="25"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer1"
     fit-margin-top="0"
     fit-margin-left="0"
     fit-margin-right="0"
     fit-margin-bottom="0" />
  <defs
     id="defs2" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-22.201469,-15.057417)">
    <rect
       style="fill:none;stroke:#000000;stroke-width:0.465383;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:0.701961;paint-order:fill markers stroke"
       id="rect846"
       width="165.36304"
       height="141.36086"
       x="22.43416"
       y="15.290109"
       ry="0.42582738" />
    <text
       xml:space="preserve"
       style="font-size:5.29167px;line-height:1.25;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
       x="24.717442"
       y="23.228437"
       id="text1523"><tspan
         sodipodi:role="line"
         id="tspan1521"
         style="font-weight:bold;font-size:5.29167px;stroke-width:0.264583"
         x="24.717442"
         y="23.228437">Optimised Morton Encoding</tspan></text>
    <g
       id="g100157"
       transform="translate(0,-0.01472816)">
      <text
         xml:space="preserve"
         style="font-size:3.175px;line-height:1.25;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
         x="26.954144"
         y="30.59849"
         id="text4005"><tspan
           sodipodi:role="line"
           id="tspan4003"
           style="font-weight:bold;stroke-width:0.264583"
           x="26.954144"
           y="30.59849">Lookup Tables</tspan></text>
      <text
         xml:space="preserve"
         style="font-size:3.175px;line-height:1.25;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
         x="27.078167"
         y="34.979816"
         id="text6609"><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="34.979816"
           id="tspan12158">Consider a given set of  indices describing the</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="38.948566"
           id="tspan16242">anchor of an octree node (x, y, z). The Morton</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="42.917316"
           id="tspan17476">encoding can be statically encoded in a lookup</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="46.886066"
           id="tspan29100">table.</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="50.854816"
           id="tspan28250" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="54.823566"
           id="tspan17482">For example, (x, y, z) = (4, 55, 132) which in</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="58.792316"
           id="tspan17488">binary is (100, 110111, 10000100). As we have</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="62.761066"
           id="tspan30460">to interleave these bits, we can add zero bits</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="66.729813"
           id="tspan33038">and perform a bitwise `or' operation to find the</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="70.698563"
           id="tspan33040">final Morton key: </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="74.667313"
           id="tspan30462" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="78.636063"
           id="tspan40446">x<tspan
   style="font-size:65%;baseline-shift:sub"
   id="tspan37428">shift</tspan> | y<tspan
   style="font-size:65%;baseline-shift:sub"
   id="tspan36080">shift</tspan> | z<tspan
   style="font-size:65%;baseline-shift:sub"
   id="tspan35560">shift</tspan> = </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="82.604813"
           id="tspan42844">       01000000 </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="86.573563"
           id="tspan41670">       | 00010010000010010010</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="90.542313"
           id="tspan44386">       | 100000000000000100000000 </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="94.511063"
           id="tspan25408" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="98.479813"
           id="tspan25410">If x, y, z âˆˆ [0, 255], these shifts can be stored</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="102.52364"
           id="tspan49182">in small statically stored lookup tables, and </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="106.49239"
           id="tspan49184">we can encode a Morton key for larger indices </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="110.46114"
           id="tspan49186">by considering their bits byte by byte.</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="114.42989"
           id="tspan90790" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="118.39864"
           id="tspan90792">This is a divide and conquer strategy, that has</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="122.36739"
           id="tspan90794">been shown to be faster than on-the-fly</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="126.33614"
           id="tspan91632">implementation using for-loops and bit-shifts<tspan
   style="font-size:65%;baseline-shift:super"
   id="tspan91766">1</tspan>.</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="130.30489"
           id="tspan91834" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="134.27364"
           id="tspan91836" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="138.24239"
           id="tspan91838" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="27.078167"
           y="142.21114"
           id="tspan91840" /><tspan
           sodipodi:role="line"
           style="font-size:2.46944px;stroke-width:0.264583"
           x="27.078167"
           y="146.17989"
           id="tspan91842">1. https://www.forceflow.be/2013/10/07/</tspan><tspan
           sodipodi:role="line"
           style="font-size:2.46944px;stroke-width:0.264583"
           x="27.078167"
           y="150.14864"
           id="tspan95498">morton-encodingdecoding-through-bit-interleaving</tspan><tspan
           sodipodi:role="line"
           style="font-size:2.46944px;stroke-width:0.264583"
           x="27.078167"
           y="154.11739"
           id="tspan96426">-implementations/</tspan></text>
    </g>
    <g
       id="g100077">
      <text
         xml:space="preserve"
         style="font-size:3.175px;line-height:1.25;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
         x="101.55638"
         y="30.593063"
         id="text4411"><tspan
           sodipodi:role="line"
           id="tspan4409"
           style="font-weight:bold;stroke-width:0.264583"
           x="101.55638"
           y="30.593063">Shared Memory Parallelism With Rayon</tspan></text>
      <text
         xml:space="preserve"
         style="font-size:3.175px;line-height:1.25;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
         x="101.75947"
         y="34.979816"
         id="text57766"><tspan
           sodipodi:role="line"
           id="tspan57764"
           style="stroke-width:0.264583"
           x="101.75947"
           y="34.979816">This lookup strategy can be performed in parallel over</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="38.948566"
           id="tspan57768">each anchor being encoded, which is easy to to using the</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="42.917316"
           id="tspan60118">Rayon crate for shared memory parallelism.</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="46.886066"
           id="tspan60120" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="50.854816"
           id="tspan60122">Rust defines `iterators', which are a functional programming</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="54.823566"
           id="tspan60124">abstraction to apply a single transformation to a set of</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="58.792316"
           id="tspan61438">data.</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="62.761066"
           id="tspan61440" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="66.729813"
           id="tspan61442">For example, consider the calculation of the squares of a</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="70.698563"
           id="tspan61892">vector of numbers, which are then summed. This can be</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="74.667313"
           id="tspan67514">expressed as:</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="78.636063"
           id="tspan63298" /><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="82.604813"
           id="tspan63300">let vec: Vec&lt;i32&gt; = vec![0,1,2,3,4,5];</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="86.59034"
           id="tspan65650" /><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="90.575867"
           id="tspan65652">let res = vec.iter()</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="94.561394"
           id="tspan65866">   .map(|&amp;i| i*i)</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="98.546921"
           id="tspan65868">   .sum();</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="102.53245"
           id="tspan68466" /><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="106.51797"
           id="tspan68468" /><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
           x="101.75947"
           y="110.5035"
           id="tspan68470">Rayon's main abstraction is to extend this to a parallel</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
           x="101.75947"
           y="114.47225"
           id="tspan69408">setting with <tspan
   style="font-style:italic"
   id="tspan70660">parallel iterators</tspan>:</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
           x="101.75947"
           y="118.441"
           id="tspan74038" /><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="122.40975"
           id="tspan74040">let res = vec.par_iter() // &lt;- only change</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="126.39528"
           id="tspan74042">   .map(|&amp;i| i*i)</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="130.38081"
           id="tspan74044">   .sum();</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'Roboto Mono';-inkscape-font-specification:'Roboto Mono';stroke-width:0.264583"
           x="101.75947"
           y="134.36633"
           id="tspan82338" /><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
           x="101.75947"
           y="138.35187"
           id="tspan84426">Rayon's parallel iterators are an abstraction built on top of</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
           x="101.75947"
           y="142.32062"
           id="tspan84434">its work-stealing based parallel backend. Rayon fully</tspan><tspan
           sodipodi:role="line"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:'CMU Serif';-inkscape-font-specification:'CMU Serif';stroke-width:0.264583"
           x="101.75947"
           y="146.28937"
           id="tspan86440">incorporates Rust's multithreading safety features, and </tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="150.25812"
           id="tspan61894">therefore guarantees data-race freedom.</tspan><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="154.22687"
           id="tspan70662" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="158.19562"
           id="tspan61896" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="162.16437"
           id="tspan61444" /><tspan
           sodipodi:role="line"
           style="stroke-width:0.264583"
           x="101.75947"
           y="166.13312"
           id="tspan61446" /></text>
    </g>
  </g>
</svg>
